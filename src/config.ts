import url from 'url';
import { findUp } from 'find-up';
import { camelCase, pascalCase } from 'change-case';
import type { ParsedMethod } from './parsed-types';
import { DEFAULT_J5_LIST_GENERIC_OVERRIDES, defaultJ5ListGenericValueDeterminer } from './j5-list';
import type { ClientOutput, Config, TypeOutput } from './config-types';

const defaultTypeOutput: TypeOutput = {
  fileName: 'index.ts',
  directory: './generated/types',
  topOfFileComment: '@generated by @pentops/jsonapi-jdef-ts-generator - do not edit',
};

const defaultClientOutput: ClientOutput = {
  fileName: 'index.ts',
  directory: './generated/client',
  topOfFileComment: '@generated by @pentops/jsonapi-jdef-ts-generator - do not edit',
};

export const defaultConfig: Config = {
  dryRun: false,
  generateIndexFiles: true,
  typeOutput: defaultTypeOutput,
  client: {
    methodNameWriter: (method: ParsedMethod) => camelCase(method.fullGrpcName),
  },
  types: {
    genericOverrides: DEFAULT_J5_LIST_GENERIC_OVERRIDES,
    genericValueDeterminer: defaultJ5ListGenericValueDeterminer,
    enumType: 'enum',
    nameWriter: (x) =>
      x
        .split('.')
        .map((s) => pascalCase(s))
        .join(''),
    requestType: 'merged',
  },
  jsonSource: {
    path: 'jdef.json',
  },
  plugins: [],
  state: {
    fileName: '.jdef_state.json',
    codemod: {
      rename: true,
      removeUnusedSchemas: true,
    },
  },
  verbose: false,
};

function mergeConfig(userSpecified: Partial<Config>): Config {
  const config: Config = { ...defaultConfig };

  if (userSpecified.dryRun) {
    config.dryRun = userSpecified.dryRun;
  }

  if (userSpecified.typeOutput) {
    config.typeOutput = { ...config.typeOutput, ...userSpecified.typeOutput };
  }

  if (userSpecified.clientOutput) {
    config.clientOutput = { ...config.clientOutput, ...defaultClientOutput, ...userSpecified.clientOutput };
  }

  if (userSpecified.types) {
    config.types = { ...config.types, ...userSpecified.types };
  }

  if (userSpecified.client) {
    config.client = { ...config.client, ...userSpecified.client };
  }

  if (userSpecified.plugins) {
    config.plugins = userSpecified.plugins;
  }

  // JSONSource is required
  if (userSpecified.jsonSource) {
    config.jsonSource = userSpecified.jsonSource;
  } else {
    console.warn('[jdef-ts-generator]: no JSON source specified, attempting to find `.jdef_config.js` file by default');
  }

  if (userSpecified.state) {
    config.state = { ...config.state, ...userSpecified.state };
  }

  return config;
}

export async function loadConfig(): Promise<Config> {
  try {
    const configJs = await findUp('.jdef_config.js');

    if (configJs) {
      const configModule = await import(url.pathToFileURL(configJs).href);

      if (configModule?.default) {
        return mergeConfig(configModule.default);
      }
    }
  } catch (err) {
    throw new Error(`[jdef-ts-generator]: error loading .jdef_config.js file: ${err}`);
  }

  console.warn('[jdef-ts-generator]: no .jdef_config.js file found, using default config');

  return defaultConfig;
}
